node architecture
node 하위 다중 pod 하위 다중 클러스터
kubelet / kube-proxy > iptables < service:LB < internet
pod(docker)

replication controller
stateless = 어플리케이션이 상태를 가지고 있지 않음
로컬 파일을 작성하지 않고 로컬 세션 데이터를 유자할 수 없음
MySQL, Postgres = stateful
Session management needs to be done outside the container
여러번 실행해도 상태를 변경하지 않음

모범 사례 : 12factor.net

수평 확장은 불가 수직 확장은 가능
replication controller 지정된 수의 파드 복제본이 항상 실행되게함

replication set / replication controller 차이
set : "environments" either "dev" or "qa"
controller : "environments" == "dev"
더 복잡한 매칭을 수행 가능, 배포 객체에 새용

쿠버네티스는 클러스터가 원하는 상태와 매칭되어있는지 확인

deployments
deployment object
앱 배포, 업데이트, 롤링 업데이트, 롤백 , 일시 중지 / 재개 수행
kubectl get deployments / 배포에 관한 정보 획득
kubectl get rs / replica set에 대한 정보 획득
kubectl get pods --show-labels / 실행중인 팟 (레이블 포함) 표시
kubectl rollout status deployment/~ / 배포 상태 획득
kubectl set image deployment/~:2 / 다른 버전 이미지 실행
kubectl edit deployment/~ / 배포 객체 편집
kubectl rollout status deployment/~ / 롤아웃 상태 확인
kubectl rollout history deployment/~ / 배포된 버전의 기록 확인
kubectl rollout undo deployment/~ / 이전 버전으로 롤백

services
팟을 업데이트할때 이전 팟을 종료하고 새 팟을 생성하기때문에 항상 서비스를 통해 접근해야함
service는 언젠가는 죽는 팟과 다른 서비스 혹은 최종 사용자간의 논리적 다리

서비스를 생성하면 pod의 endpoint가 생성됨
Cluster IP : 클러스터 내에서만 연결 가능한 가상 IP 사용
NodePort : 외부에서도 연결 가능한 각 노드에서 동일한 포트
LB : 외부 트래픽을 노드포트의 모든 노드로 라우팅

DNS name 또한 사용 가능

기본적으로 서비스의 포트 범위는 30000-32767
--service-node-port-range를 kube-apiserver 끝에 넣어 동작 변경 가능

labels
객체에 연결할 수 있는 key/value 쌍
라벨은 고유하지 않으며 하나의 객체에 여러 개 사용 가능

label Selectors
필터를 사용하여 결과 범위를 좁힐 수 있음
일치 표현식
특정 pot을 일정 라벨이 지정된 노드에서만 실행 할 수 있게끔 설정

1. 노드에 태그를 지정
2. pod config에 nodeSelector 추가
예)
kubectl label nodes node1 hardware=high-spec
kubectl label nodes node2 hardware=low-spec
pod
nodeSelector:
    hardware: high-spec

health check
컨테이너에서 주기적으로 명령을 실행하거나,
HTTP를 사용해 URL을 주기적으로 검사
AWS LB를 사용하더라도 체크가 필요

readiness probe
livenessProbes는 컨테이너가 실행중인지 여부
검사에 실패하면 재시작

readinessProbes는 컨테이너가 요청을 처리할 준비가 되었는지 여부
검사에 실패하면 IP가 서비스에서 제거되어 요청을 처리하지 않음
테스트에 성공하면 pod이 트래픽을 수신하는지 확인

일반적으론 둘다 구성함.

pod state

kubectl get pods
Running 실행중
Pending 보류중
리소스 제약(메모리 부족)이나 컨테이너 이미지를 다운로드중
Succeeded 모든 컨테이너가 성공적으로 종료되었고 다시 시작하지 않음
Failed 실패
exit code 0 성공 / 나머지 실패
Unknown 알 수 없음

kubectl describe pod ~

PodConditions

PodSchedules 팟이 노드에 예약됨
Ready 팟이 요청을 처리할 수 있고 매칭 서비스에 추가됨
Initialized 초기화 컨테이너가 성공적으로 시작
UnSchedulable 팟을 예약 할 수 없음
Containersready 모든 컨테이너가 준비됨

secret
쿠버네티스에서 credentials, 키, 암호 또는 시크릿 데이터를 팟에 배포하는 방법을 제공
pod은 시크릿에 엑세스 할 수 있음

환경변수로 사용
파일로 사용
- 컨테이너에 마운트 할 볼륨을 사용
- dotenv 파일
외부 이미지에서 사용(private 이미지)

file

username.txt
password.txt
kubectl create secret generic ~ --from-file=username.txt

ssh

kubectl create secret generic ~
--from-file=ssh-privatekey=~.ssh/id_rsa --ssl-cert-=ssl-cert=mysslcert.crt
